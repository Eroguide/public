"""
Address is a 20 byte Opera address, represented as 0x prefixed hexadecimal number.
"""
scalar Address

"""Represents advantage of salon"""
type Advantage {
  """ID"""
  id: BigInt!

  """Name of advantage"""
  name: String!

  """Image of advantage"""
  image: String!

  """Created at"""
  createdAt: Date!
}

type AdvantageConnection {
  """Edges contains provided edges of the sequential list."""
  edges: [AdvantageEdge!]!

  """TotalCount is the total amount of items in the list."""
  totalCount: BigInt!

  """PageInfo is an information about the current page of the list."""
  pageInfo: PageInfo!
}

type AdvantageEdge {
  cursor: Cursor!
  node: Advantage!
}

type AdvantageMutationOutput {
  """list of errors"""
  errors: [MutationError!]!

  """operation results"""
  advantage: Advantage
}

"""Type Application allows see contacts of potential employees and salons"""
type Application {
  """ID"""
  id: BigInt!

  """Name of employee/salon"""
  title: String!

  """
  Type of application
  Variants:
  salon-escort - employees of private salon
  salon-masseur - employees of common salon
  private-escort - private employees
  private-massaur - common masseur
  """
  type: String!

  """Email of applicant"""
  email: String!

  """Phone of applicant"""
  phone: String!

  """status of application (canceled, considered, new)"""
  status: String!

  """Date when application was created"""
  createdAt: Date!
}

type ApplicationConnection {
  """Edges contains provided edges of the sequential list."""
  edges: [ApplicationEdge!]!

  """TotalCount is the total amount of items in the list."""
  totalCount: BigInt!

  """PageInfo is an information about the current page of the list."""
  pageInfo: PageInfo!
}

type ApplicationEdge {
  cursor: Cursor!
  node: Application!
}

input ApplicationFilterSort {
  """fast search by title"""
  fastSearch: String

  """
  type of application
  Variants:
  salon-escort - employees of private salon
  salon-masseur - employees of common salon
  private-escort - private employees
  private-massaur - common masseur
  """
  types: [String!]

  """status of application (new, considered, canceled)"""
  status: String

  """Sort by created"""
  created: Date
}

type ApplicationMutationOutput {
  """list of errors"""
  errors: [MutationError!]!

  """operation results"""
  application: Application
}

input BigFilterColumn {
  """Sort by shift (ex. "Monday")"""
  shift: String

  """Sorting by created """
  created: DateColumn

  """Sorting by age """
  age: BigIntColumn

  """Sorting by type"""
  types: [String!]

  """Sorting by breast size"""
  breastSize: BigIntColumn

  """Sorting by height"""
  height: BigIntColumn

  """Sorting by weight"""
  weight: BigIntColumn

  """Sorting by service program (ex. ["1", "2"])"""
  program: [String!]
}

"""BigInt is a large (256bits) integer value serialized as string."""
scalar BigInt

"""Filtering or sorting on BigInt column"""
input BigIntColumn {
  """Sort records by the column in given direction"""
  sort: SortDirection

  """
  Sorting priority of the column (applies when sorting by multiple columns, smaller number first)
  """
  priority: Int

  """Filter records where the column equals given value"""
  eq: BigInt

  """Filter records where the column does NOT equal given value"""
  neq: BigInt

  """
  Filter records where is the value greater or equal (inclusive lower bound)
  """
  from: BigInt

  """
  Filter records where is the value less or equal (inclusive upper bound)
  """
  to: BigInt

  """Filter records where the value equals one of given values"""
  in: [BigInt!]
}

"""Filtering ONLY on BigInt column"""
input BigIntColumnFilterOnly {
  """Filter records where the column equals given value"""
  eq: BigInt

  """Filter records where the column does NOT equal given value"""
  neq: BigInt

  """
  Filter records where is the value greater or equal (inclusive lower bound)
  """
  from: BigInt

  """
  Filter records where is the value less or equal (inclusive upper bound)
  """
  to: BigInt

  """Filter records where the value equals one of given values"""
  in: [BigInt!]
}

"""Category type"""
type Category {
  """ID"""
  id: BigInt!

  """Category name"""
  name: String!

  """Date when category was created"""
  createdAt: Date!
}

type CategoryConnection {
  """Edges contains provided edges of the sequential list."""
  edges: [CategoryEdge!]!

  """TotalCount is the total amount of items in the list."""
  totalCount: BigInt!

  """PageInfo is an information about the current page of the list."""
  pageInfo: PageInfo!
}

type CategoryEdge {
  cursor: Cursor!
  node: Category!
}

type CategoryMutationOutput {
  """list of errors"""
  errors: [MutationError!]!

  """operation results"""
  category: Category
}

"""Counter type represents all counters for font-end menu"""
type Counter {
  """Get all employees"""
  allEmployees: BigInt!

  """Get new employees"""
  newEmployees: BigInt!

  """Get top employees"""
  topEmployees: BigInt!

  """Get available employees"""
  availableEmployees: BigInt!

  """Get all private masseurs"""
  allMasseurs: BigInt!

  """Get all employees in public parlours"""
  allPublicParlours: BigInt!

  """Get all private escort employees"""
  allPrivateEmployees: BigInt!

  """Get all employees in a private parlours"""
  allPrivateParlours: BigInt!
}

input CounterInfo {
  from: Date!
  to: Date!
  weekDay: String!
}

"""
Cursor is a string representing position in a sequential list of edges.
"""
scalar Cursor

"""Date represents ..."""
scalar Date

"""Filtering or sorting on Date column"""
input DateColumn {
  """Sort records by the column in given direction"""
  sort: SortDirection

  """
  Sorting priority of the column (applies when sorting by multiple columns, smaller number first)
  """
  priority: Int

  """
  Filter records whose date is equal or after given date (inclusive lower bound)
  """
  from: Date

  """
  Filter records whose date is equal of before given date (inclusive upper bound)
  """
  to: Date
}

"""Filtering ONLY on Date column"""
input DateColumnFilterOnly {
  """
  Filter records whose date is equal or after given date (inclusive lower bound)
  """
  from: Date

  """
  Filter records whose date is equal of before given date (inclusive upper bound)
  """
  to: Date
}

"""Decimal is an exact numeric data type."""
scalar Decimal

"""Filtering or sorting on Decimal column"""
input DecimalColumn {
  """Sort records by the column in given direction"""
  sort: SortDirection

  """
  Sorting priority of the column (applies when sorting by multiple columns, smaller number first)
  """
  priority: Int

  """Filter records where the column equals given value"""
  eq: Decimal

  """Filter records where the column does NOT equal given value"""
  neq: Decimal

  """Filter records where is the value greater or equal"""
  from: Decimal

  """Filter records where is the value less or equal"""
  to: Decimal
}

"""
Type Employee represents emploee which works in current salon (salon_id)
"""
type Employee {
  """ID"""
  id: BigInt!

  """Name of employee"""
  name: String!

  """Main photo of employee"""
  mainPhoto: String!

  """Head photo of employee"""
  headPhoto: String!

  """Employee status"""
  status: Boolean

  """Active til"""
  active: String

  """Employee address"""
  address: String!

  """Employee street"""
  street: String

  """Employee city"""
  city: String

  """Employee province"""
  province: String

  """Employee country"""
  country: String

  """Employee email"""
  email: String

  """Employee phone"""
  phone: String

  """Age of employee"""
  age: BigInt!

  """Emploee's weight"""
  weight: BigInt!

  """Emploee's height"""
  height: BigInt!

  """Emploee's bust"""
  breastSize: BigInt!

  """Emploee's foot"""
  footSize: BigInt!

  """Is draft salon ?"""
  isDraft: Boolean

  """Is private employee ?"""
  type: String!

  """Availability of emploee to come out"""
  meetingPoint: String!

  """Info about cost of departure"""
  departureCost: String!

  """Employee price"""
  price: BigInt!

  """Employee desc"""
  description: String!

  """interview with Emploee"""
  interview: String

  """Employee's video"""
  video: String

  """is employee turned on/off ?"""
  isTurnOff: Boolean

  """Date of top ends"""
  topDate: Date

  """Date of top of day ends"""
  dayTop: Date

  """Date when schedule was updated"""
  scheduleUpdatedAt: Date!

  """Represents belonging to the salon."""
  salonId: BigInt

  """Date when employee was created"""
  createdAt: Date!

  """Emploee's languages"""
  languages: [Language!]!

  """Emploee's schedule"""
  schedule: [EmployeeSchedule!]!

  """Emploee's services"""
  services: [Service!]!

  """Emploee's extra services"""
  extraServices: [ExtraService!]!

  """Emploee's services like"""
  serviceLike: [SalonEmployeeServiceLike!]!

  """Emploee's extra services like"""
  extraServiceLike: [SalonEmployeeExtraServiceLike!]!

  """Gallery of current employee"""
  gallery: [String!]!

  """Employee location"""
  location: Location

  """Employee can be belongs to salon"""
  salon: Salon
}

type EmployeeConnection {
  """Edges contains provided edges of the sequential list."""
  edges: [EmployeeEdge!]!

  """TotalCount is the total amount of items in the list."""
  totalCount: BigInt!

  """PageInfo is an information about the current page of the list."""
  pageInfo: PageInfo!
}

type EmployeeEdge {
  cursor: Cursor!
  node: Employee!
}

"""EmployeeFilterSort represents sorting of employee data"""
input EmployeeFilterSort {
  """Big Filter"""
  filter: BigFilterColumn

  """Fast Search"""
  fastSearch: String

  """Filter by city"""
  city: String

  """Filter by province"""
  province: String

  """
  Shift - day for searching employees wich works at that day (Full day of the week - ex. Monday)
  """
  shift: String

  """
  enter column for top filtering
  Variants:
  top_date - top employees
  day_top - top employees of the day
  """
  top: String

  """is a private employee ?"""
  isDraft: Boolean

  """
  type of employee
  Variants:
  salon-escort - employees of private salon
  salon-masseur - employees of common salon
  private-escort - private employees
  private-massaur - common masseur
  """
  type: String

  """filter by ids"""
  identificatior: BigIntColumn

  """Filter by schedule update"""
  shlUpdated: DateColumn

  """Sorting by created """
  created: DateColumn
}

type EmployeeMutationOutput {
  """list of errors"""
  errors: [MutationError!]!

  """operation results"""
  employee: Employee
}

"""EmployeeSchedule represents schedule of salon by week days"""
type EmployeeSchedule {
  """id: BigInt!"""
  id: BigInt!

  """Day of week"""
  day: String!

  """status in current day"""
  status: String!

  """Start work in current day"""
  startTime: Time!

  """End work in current day"""
  endTime: Time!
}

"""
# Type SalonEmployee represents emploee which works in current salon (salon_id)
type SalonEmployee {
	# ID
	id: BigInt!
	# Name of Employee
	name: String!
	# Main photo of Emploee
	mainPhoto: String!
	# Head photo of Emploee
	headPhoto: String!
	# Salon status
	status: Boolean
	# Age of Emploee
	age: BigInt!
	# Emploee's weight
	weight: BigInt!
	# Emploee's height
	height: BigInt!
	# Emploee's bust
	breastSize: BigInt!
	# Emploee's foot
	footSize: BigInt!
	# Availability of emploee to come out
	meetingPoint: String!
	# Info about cost of departure
	departureCost: String!
	# Service price 
	price: BigInt!
	# Emploee desc
	description: String!
	# interview with Emploee
	interview: String
	# Represents belonging to the salon.
	salonId: BigInt!
	# Created at
	createdAt: Date!
	# Emploee's languages
	languages: [Language!]!
	# Salon employee schedule
	schedule: [SalonEmployeeSchedule!]!
	# Emploee's like services
	serviceLike: [SalonEmployeeServiceLike!]!
}
# Input SalonEmployee 
input InputSalonEmployee {
	# ID
	id: BigInt
	# Name of Employee
	name: String!
	# Main photo of Emploee
	mainPhoto: Upload
	# Head photo of Emploee
	headPhoto: Upload
	# Salon status
	status: Boolean
	# Age of Emploee
	age: BigInt!
	# Emploee's weight
	weight: BigInt!
	# Emploee's height
	height: BigInt!
	# Emploee's bust
	breastSize: BigInt!
	# Emploee's foot
	footSize: BigInt!
	# Availability of emploee to come out
	meetingPoint: String!
	# Info about cost of departure
	departureCost: String!
	# Service price 
	price: BigInt!
	# Emploee desc
	description: String!
	# interview with Employee
	interview: String
	# Represents belonging to the salon.
	salonId: BigInt
	# IDs of languages for salon employee
	languageIDs: [BigInt!]
	# Salon employee's schedule
	schedule: [InputSalonEmployeeSchedule!]!
	# service like preferences
	serviceLikeInput: [InputSalonEmployeeServiceLike!]!
}
type SalonEmployeeMutationOutput {
	# list of errors
   errors: [MutationError!]!
	#operation results
	salonEmployee: SalonEmployee
}
type SalonEmployeeConnection {
	# Edges contains provided edges of the sequential list.
	edges: [SalonEmployeeEdge!]! 
	# TotalCount is the total amount of items in the list.
	totalCount: BigInt!
	# PageInfo is an information about the current page of the list.
	pageInfo: PageInfo!
}
type SalonEmployeeEdge {
	cursor: Cursor!
	node: SalonEmployee!
}
Entry points for querying API
extend type Query {
	# Get all salons
	listSalonEmployee(first: Int, after: Cursor): SalonEmployeeConnection!
	# Get salon by id
	getSalonEmployee(id: BigInt!): SalonEmployee!
}
Mutation type holds entry points for update record through API
extend type Mutation {
	# Create SalonEmployee record in database
	createSalonEmployee(salonEmployee: InputSalonEmployee!): SalonEmployeeMutationOutput!
	# Update SalonEmployee record
	updateSalonEmployee(salonEmployee: InputSalonEmployee!): SalonEmployeeMutationOutput!
	# Delete SalonEmployee record
	deleteSalonEmployee(id: BigInt!): SalonEmployeeMutationOutput!
}
"""
enum ErrorLevel {
  ERROR
  WARNING
  NOTE
}

"""ExtraService represents services which has salon or girl"""
type ExtraService {
  """ID"""
  id: BigInt!

  """Name of extra service"""
  name: String!

  """Desc of extra service"""
  description: String!

  """Price of extra service"""
  price: BigInt!

  """ExtraService which accept to current salon"""
  salonId: BigInt

  """ExtraService which accept to current employee"""
  employeeId: BigInt

  """PREFERENCE OF employeeId"""
  preference: String

  """COMMENT OF employeeId"""
  comment: String

  """order position"""
  order: BigInt

  """Date extra service creation"""
  createdAt: Date!
}

type ExtraServiceMutationOutput {
  """list of errors"""
  errors: [MutationError!]!

  """operation results"""
  extraService: ExtraService
}

input InputAdvantage {
  """ID"""
  id: BigInt

  """Name of advantage"""
  name: String!

  """Image of advantage"""
  image: String!
}

input InputApplication {
  """ID"""
  id: BigInt

  """Name of employee/salon"""
  title: String!

  """
  Type of application
  Variants:
  salon-escort - employees of private salon
  salon-masseur - employees of common salon
  private-escort - private employees
  private-massaur - common masseur
  """
  type: String!

  """Email of applicant"""
  email: String!

  """Phone of applicant"""
  phone: String!

  """status of application (canceled, considered, new)"""
  status: String
}

input InputCategory {
  """ID"""
  id: BigInt

  """Category name"""
  name: String!
}

input InputEmployee {
  """ID"""
  id: BigInt

  """Name of employee"""
  name: String!

  """Main photo of employee"""
  mainPhoto: String!

  """Head photo of employee"""
  headPhoto: String!

  """Employee status"""
  status: Boolean

  """Active til"""
  active: String

  """Employee street"""
  street: String

  """Employee city"""
  city: String

  """Employee province"""
  province: String

  """Employee country"""
  country: String

  """Base on full address"""
  longitude: Decimal

  """Base on full address"""
  latitude: Decimal

  """Employee email"""
  email: String

  """Employee phone"""
  phone: String

  """Age of employee"""
  age: BigInt!

  """Emploee's weight"""
  weight: BigInt!

  """Emploee's height"""
  height: BigInt!

  """Emploee's bust"""
  breastSize: BigInt!

  """Emploee's foot"""
  footSize: BigInt!

  """Is draft salon ?"""
  isDraft: Boolean

  """Is private employee ?"""
  type: String!

  """Availability of emploee to come out"""
  meetingPoint: String!

  """Info about cost of departure"""
  departureCost: String!

  """Employee price"""
  price: BigInt!

  """Employee desc"""
  description: String!

  """interview with Emploee"""
  interview: String

  """Employee's video"""
  video: String

  """Represents belonging to the salon."""
  salonId: BigInt

  """IDs of languages for employee"""
  languageIDs: [BigInt!]

  """Employee's schedule"""
  schedule: [InputEmployeeSchedule!]!

  """service like preferences"""
  serviceLikeInput: [InputSalonEmployeeServiceLike!]

  """service like preferences"""
  extraServiceLikeInput: [InputSalonEmployeeExtraServiceLike!]

  """Gallery of current employee"""
  gallery: [String!]!
}

input InputEmployeeSchedule {
  """id: BigInt"""
  id: BigInt

  """Day of week"""
  day: String!

  """status in current day"""
  status: String!

  """Start work in current day"""
  startTime: Time!

  """End work in current day"""
  endTime: Time!
}

input InputExtraService {
  """ID"""
  id: BigInt

  """Name of extra service"""
  name: String!

  """Desc of extra service"""
  description: String!

  """Price of extra service"""
  price: BigInt!

  """ExtraService which accept to current salon"""
  salonId: BigInt

  """ExtraService which accept to current employee"""
  employeeId: BigInt

  """PREFERENCE OF employeeId"""
  preference: String

  """COMMENT OF employeeId"""
  comment: String
}

input InputExtraServiceOrder {
  """ID of extra extra service	"""
  extraServiceId: BigInt!

  """order position of extra serivice"""
  orderPosition: BigInt!
}

input InputLanguage {
  """ID"""
  id: BigInt

  """Language name"""
  name: String!
}

input InputLocation {
  """ID"""
  id: BigInt

  """longitude of salon or employee"""
  longitude: Decimal!

  """latitude of salon or employee"""
  latitude: Decimal!
  employeeId: BigInt
  salonId: BigInt
}

input InputMassage {
  """ID"""
  id: BigInt

  """Name of massage"""
  name: String!

  """Image picture"""
  isPrivate: Boolean

  """Image picture"""
  image: String!
}

input InputPost {
  """ID"""
  id: BigInt

  """Title of post"""
  title: String!

  """Image of post"""
  image: String!

  """Text of post"""
  text: String!

  """Is it draft or not"""
  isDraft: Boolean

  """Meta title of post"""
  metaTitle: String!

  """Meta description of post"""
  metaDescription: String!

  """IDs of categories"""
  categoriesIDs: [BigInt!]
}

input InputSalon {
  """id: BigInt!"""
  id: BigInt

  """Salon title"""
  title: String!

  """Salon image"""
  logo: String!

  """Main photo of salon"""
  mainPhoto: String!

  """Head photo of salon"""
  headPhoto: String!

  """Salon street"""
  street: String!

  """Salon city"""
  city: String!

  """Salon province"""
  province: String!

  """Salon country"""
  country: String!

  """Base on full address"""
  longitude: Decimal!

  """Base on full address"""
  latitude: Decimal!

  """Salon site"""
  site: String!

  """Salon email"""
  email: String!

  """Salon phone"""
  phone: String!

  """Salon manager phone"""
  managerEmail: String!

  """Salon status"""
  status: Boolean

  """Salon manager phone"""
  managerPhone: String!

  """Salon desc"""
  description: String!

  """Date when salon will be unactive"""
  active: String!

  """Salon meta"""
  metaDescription: String!

  """Salon video"""
  video: String

  """Is draft salon ?"""
  isDraft: Boolean

  """Is private salon ?"""
  isPrivate: Boolean

  """IDs of advantages"""
  advantageIDs: [BigInt!]

  """Gallery of current salon"""
  gallery: [String!]!
}

"""InputSalonEmployeeExtraServiceLike"""
input InputSalonEmployeeExtraServiceLike {
  """ID"""
  id: BigInt

  """ID of current employee"""
  employeeId: BigInt

  """ID of current service"""
  extraServiceId: BigInt!

  """preference"""
  preferences: String!

  """description"""
  description: String
}

input InputSalonEmployeeSchedule {
  """id: BigInt"""
  id: BigInt

  """Day of week"""
  day: String!

  """status in current day"""
  status: String!

  """Start work in current day"""
  startTime: String!

  """End work in current day"""
  endTime: String!
}

"""InputSalonEmployeeServiceLike"""
input InputSalonEmployeeServiceLike {
  """ID"""
  id: BigInt

  """ID of current employee"""
  employeeId: BigInt

  """ID of current service"""
  serviceId: BigInt!

  """preference"""
  preferences: String!

  """description"""
  description: String
}

input InputService {
  """ID"""
  id: BigInt

  """Name of service"""
  name: String!

  """Desc of service"""
  description: String!

  """Price of service"""
  price: BigInt!

  """Price for half hour"""
  fstPrice: BigInt

  """Price for hour"""
  sdPrice: BigInt

  """Price for hour and half"""
  tdPrice: BigInt

  """Price for 2 hours"""
  fthPrice: BigInt

  """Price for 3 hours"""
  fifPrice: BigInt

  """Service which accept to current salon"""
  salonId: BigInt

  """Service which accept to current employee"""
  employeeId: BigInt

  """PREFERENCE OF employeeId"""
  preference: String

  """COMMENT OF employeeId"""
  comment: String

  """Massages IDs included into current service"""
  massageIDs: [BigInt!]
}

input InputServiceOrder {
  """ID of service	"""
  serviceId: BigInt!

  """order position of serivice"""
  orderPosition: BigInt!
}

"""
type LoggedUser {
	tokens: Tokens!
	user: User!
}
type LoggedUserMutationOutput {
	# list of errors
   errors: [MutationError!]!
	#operation results
	loggedUser: LoggedUser
}
"""
input InputUser {
  """id: BigInt!"""
  id: BigInt

  """User name"""
  name: String!

  """User email"""
  email: String!

  """User password"""
  password: String!
}

"""Filtering or sorting on Int column"""
input IntColumn {
  """Sort records by the column in given direction"""
  sort: SortDirection

  """
  Sorting priority of the column (applies when sorting by multiple columns, smaller number first)
  """
  priority: Int

  """Filter records where the column equals given value"""
  eq: Int

  """Filter records where the column does NOT equal given value"""
  neq: Int

  """
  Filter records where is the value greater or equal (inclusive lower bound)
  """
  from: Int

  """
  Filter records where is the value less or equal (inclusive upper bound)
  """
  to: Int

  """Filter records where the value equals one of given values"""
  in: [Int!]
}

"""Filtering ONLY on Int column"""
input IntColumnFilterOnly {
  """Filter records where the column equals given value"""
  eq: Int

  """Filter records where the column does NOT equal given value"""
  neq: Int

  """
  Filter records where is the value greater or equal (inclusive lower bound)
  """
  from: Int

  """
  Filter records where is the value less or equal (inclusive upper bound)
  """
  to: Int

  """Filter records where the value equals one of given values"""
  in: [Int!]
}

"""Language type"""
type Language {
  """ID"""
  id: BigInt!

  """Language name"""
  name: String!

  """Date when language was created"""
  createdAt: Date!
}

type LanguageConnection {
  """Edges contains provided edges of the sequential list."""
  edges: [LanguageEdge!]!

  """TotalCount is the total amount of items in the list."""
  totalCount: BigInt!

  """PageInfo is an information about the current page of the list."""
  pageInfo: PageInfo!
}

type LanguageEdge {
  cursor: Cursor!
  node: Language!
}

type LanguageMutationOutput {
  """list of errors"""
  errors: [MutationError!]!

  """operation results"""
  language: Language
}

"""Type Location represents location  of salon or employee"""
type Location {
  """ID"""
  id: BigInt!

  """longitude of salon or employee"""
  longitude: Decimal!

  """latitude of salon or employee"""
  latitude: Decimal!

  """Employee id"""
  employeeId: BigInt

  """Salon id"""
  salonId: BigInt

  """Date when location was created"""
  createdAt: Date!

  """Salon data of current loaction"""
  salon: Salon

  """Employee data of current loaction"""
  employee: Employee
}

input LocationFilterSort {
  """
  Only parlours or only private employees
  variats: 
  - Parlours
  - Employees
  """
  parlourOrEmployee: String
}

type Massage {
  """ID"""
  id: BigInt!

  """Name of massage"""
  name: String!

  """Image picture"""
  image: String!

  """Image picture"""
  isPrivate: Boolean!

  """Date of creation"""
  createdAt: Date!
}

type MassageConnection {
  """Edges contains provided edges of the sequential list."""
  edges: [MassageEdge!]!

  """TotalCount is the total amount of items in the list."""
  totalCount: BigInt!

  """PageInfo is an information about the current page of the list."""
  pageInfo: PageInfo!
}

type MassageEdge {
  cursor: Cursor!
  node: Massage!
}

"""MassageFilterSort represents sorting of employee data"""
input MassageFilterSort {
  """Fast Search"""
  fastSearch: String

  """is a private employee ?"""
  isPrivate: Boolean

  """Sorting by created """
  created: DateColumn
}

type MassageMutationOutput {
  """list of errors"""
  errors: [MutationError!]!

  """operation results"""
  massage: Massage
}

type Mutation {
  """Create фpplication record in database"""
  createApplication(application: InputApplication!): ApplicationMutationOutput!

  """Delete employee record"""
  deleteApplication(id: BigInt!): ApplicationMutationOutput!

  """Change application status"""
  changeApplicationStatus(id: BigInt!, status: String!): Boolean!

  """
  SERVICES
  Create service record in database
  """
  createService(service: InputService!): ServiceMutationOutput!

  """Update service record"""
  updateService(service: InputService!): ServiceMutationOutput!

  """Delete service record"""
  deleteService(id: BigInt!): ServiceMutationOutput!

  """Update service order"""
  updateServiceOrder(services: [InputServiceOrder]!): Boolean!

  """
  EXTRA SERVICES
  Create extra service record in database
  """
  createExtraService(extraService: InputExtraService!): ExtraServiceMutationOutput!

  """Update extra service record"""
  updateExtraService(extraService: InputExtraService!): ExtraServiceMutationOutput!

  """Delete extra service record"""
  deleteExtraService(id: BigInt!): ExtraServiceMutationOutput!

  """Update extra service order"""
  updateExtraServiceOrder(extraServices: [InputExtraServiceOrder]!): Boolean!

  """Create language"""
  createLanguage(language: InputLanguage!): LanguageMutationOutput!

  """Update language"""
  updateLanguage(language: InputLanguage!): LanguageMutationOutput!

  """Delete language"""
  deleteLanguage(id: BigInt!): LanguageMutationOutput!

  """createUser creates new record. Returns a created record."""
  createUser(user: InputUser!): String!

  """updateUser update database record. Returns an updated user"""
  updateUser(user: InputUser!): UserMutationOutput!

  """deleteUser delete record from database by ID. """
  deleteUser(id: BigInt!): UserMutationOutput!

  """Create advantage record in database"""
  createAdvantage(advantage: InputAdvantage!): AdvantageMutationOutput!

  """Update advantage record"""
  updateAdvantage(advantage: InputAdvantage!): AdvantageMutationOutput!

  """Delete advantage record"""
  deleteAdvantage(id: BigInt!): AdvantageMutationOutput!

  """Create employee record in database"""
  createEmployee(employee: InputEmployee!): EmployeeMutationOutput!

  """Update employee record"""
  updateEmployee(employee: InputEmployee!): EmployeeMutationOutput!

  """Delete employee record"""
  deleteEmployee(id: BigInt!): EmployeeMutationOutput!

  """Switch employee activity"""
  switchEmployeeActivity(id: BigInt!, switch: Boolean!): EmployeeMutationOutput!

  """Makes this employee at the top postion (24 hours)"""
  putTopEmployee(id: BigInt!): EmployeeMutationOutput!

  """Makes employee top of the day"""
  putDayTopEmployee(id: BigInt!): EmployeeMutationOutput!

  """Create post record in database"""
  createPost(post: InputPost!): PostMutationOutput!

  """Update post record"""
  updatePost(post: InputPost!): PostMutationOutput!

  """Delete post record"""
  deletePost(id: BigInt!): PostMutationOutput!

  """Create category"""
  createCategory(category: InputCategory!): CategoryMutationOutput!

  """Update category"""
  updateCategory(category: InputCategory!): CategoryMutationOutput!

  """Delete category"""
  deleteCategory(id: BigInt!): CategoryMutationOutput!

  """Create salon record in database"""
  createSalon(salon: InputSalon!): SalonMutationOutput!

  """Update salon record"""
  updateSalon(salon: InputSalon!): SalonMutationOutput!

  """Delete salon record"""
  deleteSalon(id: BigInt!): SalonMutationOutput!

  """Switch salon activity"""
  switchSalonActivity(id: BigInt!, switch: Boolean!): SalonMutationOutput!

  """Create massage record in database"""
  createMassage(massage: InputMassage!): MassageMutationOutput!

  """Update massage record"""
  updateMassage(massage: InputMassage!): MassageMutationOutput!

  """Delete massage record"""
  deleteMassage(id: BigInt!): MassageMutationOutput!
}

type MutationError {
  """offending input field"""
  field: String
  level: ErrorLevel!

  """User readable error"""
  msg: String!
}

"""
Represents pagination info from client
type PageInfo {
	startCursor: Cursor
	endCursor: Cursor
	hasNextPage: Boolean!
}
"""
type PageInfo {
  startCursor: Cursor!
  endCursor: Cursor!
  hasNextPage: Boolean!
}

"""Represents post of blog"""
type Post {
  """ID"""
  id: BigInt!

  """Title of post"""
  title: String!

  """Image of post"""
  image: String!

  """Text of post"""
  text: String!

  """Is it draft or not"""
  isDraft: Boolean

  """Meta title of post"""
  metaTitle: String!

  """Meta description of post"""
  metaDescription: String!

  """Date of post creation"""
  createdAt: Date!

  """Categories list which accept to post"""
  categories: [Category!]!
}

type PostConnection {
  """Edges contains provided edges of the sequential list."""
  edges: [PostEdge!]!

  """TotalCount is the total amount of items in the list."""
  totalCount: BigInt!

  """PageInfo is an information about the current page of the list."""
  pageInfo: PageInfo!
}

type PostEdge {
  cursor: Cursor!
  node: Post!
}

"""PostFilterSort represents different ways of searching"""
input PostFilterSort {
  """Fast Search"""
  fastSearch: String

  """Sorting by category"""
  byCategory: String

  """Sorting by created """
  created: DateColumn
}

type PostMutationOutput {
  """list of errors"""
  errors: [MutationError!]!

  """operation results"""
  post: Post
}

type Query {
  """Get all applications"""
  listApplication(filterSort: ApplicationFilterSort, first: Int, after: Cursor): ApplicationConnection!

  """Get application by id"""
  getApplication(id: BigInt!): Application!

  """Get all locations"""
  listLocation(filterSort: LocationFilterSort): [Location!]!

  """
  Get all salons
  listSalons(filterSort: SalonFilterSort, first: Int, after: Cursor): SalonConnection!
  Get service by id
  """
  getService(id: BigInt!): Service!

  """Get extra service by id"""
  getExtraService(id: BigInt!): ExtraService!

  """List of languages"""
  listLanguages(first: Int, after: Cursor): LanguageConnection!

  """Get language by id"""
  getLanguage(id: BigInt!): Language!

  """Get all users"""
  listUsers(filterSort: UserFilterSort, first: Int, after: Cursor): UserConnection!

  """Get one user by ID"""
  getUser(id: BigInt!): User

  """Get all salons"""
  listAdvantages(first: Int, after: Cursor): AdvantageConnection!

  """Get salon by id"""
  getAdvantage(id: BigInt!): Advantage!

  """Get all employees"""
  listEmployee(filterSort: EmployeeFilterSort, first: Int, after: Cursor): EmployeeConnection!

  """Get employee by id"""
  getEmployee(id: BigInt!): Employee!

  """Get all salons"""
  listPosts(filterSort: PostFilterSort, first: Int, after: Cursor): PostConnection!

  """Get post by id"""
  getPost(id: BigInt!): Post!

  """Get all counters"""
  getCounters(info: CounterInfo!): Counter!

  """List of categories"""
  listCategories(first: Int, after: Cursor): CategoryConnection!

  """Get category by id"""
  getCategory(id: BigInt!): Category!

  """Get all salons"""
  listSalons(filterSort: SalonFilterSort, first: Int, after: Cursor): SalonConnection!

  """Get salon by id"""
  getSalon(id: BigInt!): Salon!

  """Get all salons"""
  listMassages(filterSort: MassageFilterSort, first: Int, after: Cursor): MassageConnection!

  """Get salon by id"""
  getMassage(id: BigInt!): Massage!
}

"""Represents salon"""
type Salon {
  """id: BigInt!"""
  id: BigInt!

  """Salon title"""
  title: String!

  """Salon image"""
  logo: String!

  """Main photo of salon"""
  mainPhoto: String!

  """Head photo of salon"""
  headPhoto: String!

  """Salon address"""
  address: String!

  """Salon street"""
  street: String!

  """Salon city"""
  city: String!

  """Salon province"""
  province: String!

  """Salon country"""
  country: String!

  """Salon status"""
  status: Boolean

  """Salon site"""
  site: String!

  """Salon email"""
  email: String!

  """Salon phone"""
  phone: String!

  """Salon manager phone"""
  managerPhone: String!

  """Salon manager phone"""
  managerEmail: String!

  """Date when salon will be unactive"""
  active: String!

  """Salon desc"""
  description: String!

  """Salon meta"""
  metaDescription: String!

  """Salon video"""
  video: String

  """is salon turned on/off ?"""
  isTurnOff: Boolean

  """Is draft salon ?"""
  isDraft: Boolean

  """Is private salon ?"""
  isPrivate: Boolean

  """Date when schedule of salon employee was updated"""
  scheduleUpdatedAt: Date!

  """Date when salon was created"""
  createdAt: Date!

  """Girls which are accept to the salon"""
  staff: [Employee!]!

  """Advantages of current salon"""
  advantages: [Advantage!]!

  """Salons services"""
  services: [Service!]!

  """Salons extra services"""
  extraServices: [ExtraService!]!

  """Gallery of current salon"""
  gallery: [String!]!

  """Salon location"""
  location: Location
}

type SalonConnection {
  """Edges contains provided edges of the sequential list."""
  edges: [SalonEdge!]!

  """TotalCount is the total amount of items in the list."""
  totalCount: BigInt!

  """PageInfo is an information about the current page of the list."""
  pageInfo: PageInfo!
}

type SalonEdge {
  cursor: Cursor!
  node: Salon!
}

"""
# Represents preferences of emploee to current service in current salon
"""
type SalonEmployeeExtraServiceLike {
  """ID"""
  id: BigInt!

  """ID of current employee"""
  employeeId: BigInt!

  """ID of current service"""
  extraServiceId: BigInt!

  """preference"""
  preferences: String!

  """description"""
  description: String

  """extra service"""
  extraService: ExtraService!
}

"""SalonEmployeeSchedule represents schedule of salon by week days"""
type SalonEmployeeSchedule {
  """id: BigInt!"""
  id: BigInt!

  """Day of week"""
  day: String!

  """status in current day"""
  status: String!

  """Start work in current day"""
  startTime: String!

  """End work in current day"""
  endTime: String!
}

"""
# Represents preferences of emploee to current service in current salon
"""
type SalonEmployeeServiceLike {
  """ID"""
  id: BigInt!

  """ID of current employee"""
  employeeId: BigInt!

  """ID of current service"""
  serviceId: BigInt!

  """preference"""
  preferences: String!

  """description"""
  description: String

  """service info"""
  service: Service!
}

"""SalonFilterSort represents different ways of searching"""
input SalonFilterSort {
  """Fast Search"""
  fastSearch: String

  """is a private salon ?"""
  isPrivate: Boolean

  """turnoff/on salon"""
  isTurnedOff: Boolean

  """is a draft of salon ?"""
  isDraft: Boolean

  """Filter by schedule update"""
  shlUpdated: DateColumn

  """Sorting by created """
  created: DateColumn
}

type SalonMutationOutput {
  """list of errors"""
  errors: [MutationError!]!

  """operation results"""
  salon: Salon
}

"""Services represents services which has salon or girl"""
type Service {
  """ID"""
  id: BigInt!

  """Name of service"""
  name: String!

  """Desc of service"""
  description: String!

  """Price of service"""
  price: BigInt!

  """Price for half hour"""
  fstPrice: BigInt!

  """Price for hour"""
  sdPrice: BigInt!

  """Price for hour and half"""
  tdPrice: BigInt!

  """Price for 2 hours"""
  fthPrice: BigInt!

  """Price for 3 hours"""
  fifPrice: BigInt!

  """Service which accept to current salon"""
  salonId: BigInt

  """Service which accept to current employee"""
  employeeId: BigInt

  """PREFERENCE OF employeeId"""
  preference: String

  """COMMENT OF employeeId"""
  comment: String

  """order position"""
  order: BigInt

  """Date service creation"""
  createdAt: Date!

  """Massages included into current service"""
  massages: [Massage!]!
}

type ServiceMutationOutput {
  """list of errors"""
  errors: [MutationError!]!

  """operation results"""
  service: Service
}

"""Direction of sorting"""
enum SortDirection {
  ASC
  DESC
}

"""Filtering or sorting on String column"""
input StringColumn {
  """Sort records by the column in given direction"""
  sort: SortDirection

  """
  Sorting priority of the column (applies when sorting by multiple columns, smaller number first)
  """
  priority: Int

  """Filter records where the column equals given value"""
  eq: String

  """Filter records where the column does NOT equal given value"""
  neq: String

  """Filter records where the column starts with given value"""
  starts: String

  """Filter records where the column contains given value"""
  contains: String

  """Filter records where the value equals one of given values"""
  in: [String!]
}

"""Filtering ONLY on String column"""
input StringColumnFilterOnly {
  """Filter records where the column equals given value"""
  eq: String

  """Filter records where the column does NOT equal given value"""
  neq: String

  """Filter records where the column starts with given value"""
  starts: String

  """Filter records where the column contains given value"""
  contains: String

  """Filter records where the value equals one of given values"""
  in: [String!]
}

"""
Time represents date and time including time zone information in RFC3339 format.
"""
scalar Time

"""Filtering or sorting on Time column"""
input TimeColumn {
  """Sort records by the column in given direction"""
  sort: SortDirection

  """
  Sorting priority of the column (applies when sorting by multiple columns, smaller number first)
  """
  priority: Int

  """
  Filter records whose time is equal or after given time (inclusive lower bound)
  """
  from: Time

  """Filter records whose time is before given time (exclusive upper bound)"""
  to: Time

  """When filtering from-to, include NULL values?"""
  includeNull: Boolean
}

"""Filtering or sorting on TimeRange column"""
input TimeRangeColumn {
  """Sort records by the column in given direction"""
  sort: SortDirection

  """
  Sorting priority of the column (applies when sorting by multiple columns, smaller number first)
  """
  priority: Int

  """Filter records whose time is equal or after given time"""
  contains: Time
}

type Tokens {
  """accessToken"""
  accessToken: String!

  """accessExpAt"""
  accessExpAt: BigInt!

  """refreshToken"""
  refreshToken: String!

  """refreshExpAt"""
  refreshExpAt: BigInt!
}

"""Upload """
scalar Upload

"""Represents user in admin panel"""
type User {
  """id: BigInt!"""
  id: BigInt!

  """User name"""
  name: String!

  """User email"""
  email: String!

  """User password"""
  password: String!

  """User roles"""
  roles: [String!]!

  """Time when user was created"""
  createdAt: Date!
}

type UserConnection {
  """Edges contains provided edges of the sequential list."""
  edges: [UserEdge!]!

  """TotalCount is the total amount of items in the list."""
  totalCount: BigInt!

  """PageInfo is an information about the current page of the list."""
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: Cursor!
  node: User!
}

"""UserFilterSort represents different ways of searching"""
input UserFilterSort {
  fastSearch: String
  created: DateColumn
}

type UserMutationOutput {
  """list of errors"""
  errors: [MutationError!]!

  """operation results"""
  user: User
}

